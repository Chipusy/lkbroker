<?php


/**
 * This class defines the structure of the 'element' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Fri Jan 29 18:00:36 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class ElementTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.ElementTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('element');
		$this->setPhpName('Element');
		$this->setClassname('Element');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addForeignKey('CATEGORY_ID', 'CategoryId', 'INTEGER', 'category', 'ID', false, null, null);
		$this->addForeignKey('ELEMENT_STATUS_ID', 'ElementStatusId', 'INTEGER', 'element_status', 'ID', false, null, null);
		$this->addForeignKey('COMPANY_ID', 'CompanyId', 'INTEGER', 'company', 'ID', false, null, null);
		$this->addColumn('NAME', 'Name', 'VARCHAR', false, 255, null);
		$this->addColumn('TITLE', 'Title', 'VARCHAR', false, 255, null);
		$this->addColumn('DATE_CREATED', 'DateCreated', 'TIMESTAMP', false, null, null);
		$this->addColumn('DATE_UPDATED', 'DateUpdated', 'TIMESTAMP', false, null, null);
		$this->addColumn('PREVIEW', 'Preview', 'LONGVARCHAR', false, null, null);
		$this->addColumn('DESCRIPTION', 'Description', 'LONGVARCHAR', false, null, null);
		$this->addColumn('VIEW_COUNT', 'ViewCount', 'INTEGER', false, null, null);
		$this->addColumn('ORDER_COUNT', 'OrderCount', 'INTEGER', false, null, null);
		$this->addColumn('OWNER_PRICE', 'OwnerPrice', 'BIGINT', false, 20, null);
		$this->addColumn('COMPANY_PRICE', 'CompanyPrice', 'BIGINT', false, 20, null);
		$this->addColumn('PRICE_TYPE', 'PriceType', 'INTEGER', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Category', 'Category', RelationMap::MANY_TO_ONE, array('category_id' => 'id', ), 'CASCADE', null);
    $this->addRelation('ElementStatus', 'ElementStatus', RelationMap::MANY_TO_ONE, array('element_status_id' => 'id', ), 'CASCADE', null);
    $this->addRelation('Company', 'Company', RelationMap::MANY_TO_ONE, array('company_id' => 'id', ), 'CASCADE', null);
    $this->addRelation('Preference', 'Preference', RelationMap::ONE_TO_MANY, array('id' => 'element_id', ), 'CASCADE', null);
    $this->addRelation('Order', 'Order', RelationMap::ONE_TO_MANY, array('id' => 'element_id', ), 'CASCADE', null);
    $this->addRelation('ElementFile', 'ElementFile', RelationMap::ONE_TO_MANY, array('id' => 'element_id', ), 'CASCADE', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // ElementTableMap
